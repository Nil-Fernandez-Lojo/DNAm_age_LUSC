#DGE_healthy<-calcNormFactors(DGE_healthy,method =c("TMM"))
#generate design matrix and apply voom transformation to data
v <- voom(DGE, design=design, plot=TRUE)
v_healthy <- voom(DGE_healthy, design=design_healthy, plot=TRUE)
#Load C2:CP dataset
C2_CP = msigdbr(species = "Homo sapiens", category = "C2", subcategory = "CP")
C2_CP_formated<-tapply(C2_CP$entrez_gene, C2_CP$gs_name,as.character,simplify = FALSE)
idx <- ids2indices(C2_CP_formated,id=rownames(v))
idx_healthy <- ids2indices(C2_CP_formated,id=rownames(v_healthy))
#Use camera function
cam <- camera(v,idx,design, contrast = 2)
cam_healthy <- camera(v_healthy,idx_healthy,design_healthy, contrast = 2)
#Find top uprgulated genes tumor
fit <- lmFit(v, design)
tmp <- contrasts.fit(fit, coef = 2) # test DNAm acc
tmp <- eBayes(tmp)
volcanoplot(tmp, highlight = 4,names = rownames(df_rnaseq_tumor) )
top.table_acc <- topTable(tmp, sort.by = "P", n = Inf)
head(top.table_acc, 20)
summary(decideTests(tmp))
#Find top uprgulated genes tumor
fit_healthy <- lmFit(v_healthy, design_healthy)
tmp_healthy <- contrasts.fit(fit_healthy, coef = 2) # test DNAm acc
tmp_healthy <- eBayes(tmp_healthy)
volcanoplot(tmp_healthy, highlight = 4,names = rownames(df_rnaseq_healthy) )
top.table_healthy <- topTable(tmp_healthy, sort.by = "P", n = Inf)
head(top.table_healthy, 20)
summary(decideTests(tmp_healthy))
DGE<-calcNormFactors(DGE,method =c("TMM"))
View(DGE)
View(v)
plot(v)
View(Age_healthy)
View(cam)
#Use camera function
cam <- camera(v,idx,design, contrast = 3)
cam
#Use camera function
cam <- camera(v,idx,design, contrast = 4)
cam
#Use camera function
cam <- camera(v,idx,design, contrast = "DNAmAcc")
cam
#Use camera function
cam <- camera(v,idx,design, contrast = 2)
cam
y
cam_healthy <- camera(v_healthy,idx_healthy,design_healthy, contrast = "DNAmAcc")
cam_healthy
View(Age_healthy)
cam
design_simple_healthy <- model.matrix(~DNAmAcc, data=Age_healthy)
cam_healthy_simple <- camera(v_healthy_simple,idx_healthy,design_simple_healthy, contrast = "DNAmAcc")
v_healthy_simple <- voom(DGE_healthy, design=design_simple_healthy, plot=TRUE)
cam_healthy_simple <- camera(v_healthy_simple,idx_healthy,design_simple_healthy, contrast = "DNAmAcc")
cam_healthy_simple
cam
cam = data.frame(pathway = names(cam))
View(cam)
#Use camera function
cam <- camera(v,idx,design, contrast = "DNAmAcc")
rownames(cm)
rownames(cam)
cam2 = data.frame(pathway = rownames(cam), dir = cam$Direction, FDR = cam$FDR)
cam2
cam2 <- cam2[cam2$FDR < 0.05]
cam2$FDR < 0.05
cam2 <- cam2[cam2$FDR < 0.05,]
cam2
cam2$FDR <- signif(cam2$FDR,3)
cam2
library(stringr)
cam2$pathway <- apply(cam2$pathway, function(x) str_replace_all(x, fixed("_"), "\_"))
cam2$pathway <- apply(cam2$pathway, function(x) str_replace_all(x, fixed("_"), "\\_"))
cam2$pathway <- apply(cam2$pathway, 1,function(x) str_replace_all(x, fixed("_"), "\_"))
cam2$pathway <- apply(cam2$pathway, 1,function(x) str_replace_all(x, fixed("_"), "\\_"))
cam2$pathway <- apply(cam2$pathway, 2,function(x) str_replace_all(x, fixed("_"), "\\_"))
cam2$pathway <- lapply(cam2$pathway, function(x) str_replace_all(x, fixed("_"), "\\_"))
cam2$pathway <- lapply(cam2$pathway, function(x) str_replace_all(x, fixed("_"), "\\_"))
cam2$pathway <- lapply(cam2$pathway, function(x) gsub("_", "\\_", x, fixed=TRUE))
cam2
cam2 = data.frame(pathway = rownames(cam), dir = cam$Direction, FDR = cam$FDR)
cam2 <- cam2[cam2$FDR < 0.05,]
cam2$FDR <- signif(cam2$FDR,3)
cam2$pathway <- lapply(cam2$pathway, function(x) gsub("_", "\_", x, fixed=TRUE))
cam2
cam2$FDR <- paste("$", as.character(cam2$FDR),"$")
cam2
write.csv(cam2,"MyData.csv", row.names = FALSE, sep = "&")
xtable(cam2)
install.packages("xtable")
xtable(cam2)
library(xtable)
xtable(cam2)
<<results=tex>>
xtable(my.data.frame)
@
<<results=tex>>
xtable(cam2)
print(xtable(cam2), include.rownames=FALSE)
volcanoplot(tmp, highlight = 4,names = rownames(df_rnaseq_tumor) )
summary(decideTests(tmp))
tmp
head(top.table_acc, 20)
BiocManager::install("EnhancedVolcano")
plot(-log10(adj.P.Val) ~ logFC, data=tmp, pch=".")
top.table_acc
plot(-log10(adj.P.Val) ~ logFC, data=top.table_acc, pch=".")
plot(adj.P.Val ~ logFC, data=top.table_acc, pch=".", log = "y",ylim = rev(range(y)))
plot(adj.P.Val ~ logFC, data=top.table_acc, pch=".", log = "y",ylim = rev(range(adj.P.Val)))
abline(0.05,0, col = "blue")
abline(log(0.05),0, col = "blue")
abline(log10(0.05),0, col = "blue")
plot(adj.P.Val ~ logFC, data=top.table_acc, pch=".", log = "y",ylim = rev(range(adj.P.Val)))
abline(log10(0.05),0, col = "blue")
grid()
title(main="Volcano plot for differential expression for DNAm tumour acceleration")
legend("topleft",
legend=c("Gene", "Significance threshold"),
col=c("black", "blue"),
pch = c(1,NA),
lty =c(NA,1))
abline(log10(0.1),0, col = "blue")
# Figure 6
png(file="../report/img/fig6.png",
units="in",
width=10,
height=5,
res=300)
plot(adj.P.Val ~ logFC, data=top.table_acc, pch=".", log = "y",ylim = rev(range(adj.P.Val)))
abline(log10(0.05),0, col = "blue")
grid()
title(main="Volcano plot for differential expression for DNAm tumour acceleration")
legend("topright",
legend=c("Gene", "Significance threshold"),
col=c("black", "blue"),
pch = c(1,NA),
lty =c(NA,1))
dev.off()
plot(adj.P.Val ~ logFC, data=top.table_acc, pch=".", log = "y",ylim = rev(range(adj.P.Val)))
abline(log10(0.05),0, col = "blue")
grid()
title(main="Volcano plot for differential expression for DNAm tumour acceleration")
legend("topright",
legend=c("Gene", "Significance threshold"),
col=c("black", "blue"),
pch = c(".",NA),
lty =c(NA,1))
# Figure 6
png(file="../report/img/fig6.png",
units="in",
width=10,
height=5,
res=300)
plot(adj.P.Val ~ logFC, data=top.table_acc, pch=".", log = "y",ylim = rev(range(adj.P.Val)))
abline(log10(0.05),0, col = "blue")
grid()
title(main="Volcano plot for differential expression for DNAm tumour acceleration")
legend("topright",
legend=c("Gene", "Significance threshold"),
col=c("black", "blue"),
pch = c(".",NA),
lty =c(NA,1))
dev.off()
# Figure 6
png(file="../report/img/fig6.png",
units="in",
width=10,
height=5,
res=300)
plot(adj.P.Val ~ logFC, data=top.table_acc,
pch=".",
log = "y",
ylim = rev(range(adj.P.Val)),
xlab = "Weight in linear model",
ylab = "Adjusted p value")
abline(log10(0.05),0, col = "blue")
grid()
title(main="Volcano plot for differential expression for DNAm tumour acceleration")
legend("topright",
legend=c("Gene", "Significance threshold"),
col=c("black", "blue"),
pch = c(".",NA),
lty =c(NA,1))
dev.off()
rm(list = ls())
library(msigdbr)
library(limma)
library(edgeR)
library(Homo.sapiens)
#Load Clinical data
df_clinical <- as.data.frame(t(read.table(file = '../data/Clinical/LUSC.clin.merged.picked.txt', sep = '\t', header = TRUE,row.names=1)))
df_clinical <- df_clinical["years_to_birth"]
colnames(df_clinical) <- c("ChronologicalAge")
df_clinical$ChronologicalAge <- as.numeric(df_clinical$ChronologicalAge)
df_clinical <- na.omit(df_clinical)
#add Participant to Clinical data
TCGA_names_df_split <- data.frame(do.call(rbind,strsplit(rownames(df_clinical), ".", fixed=TRUE))[,3])
colnames(TCGA_names_df_split) <- c("Participant")
df_clinical <- cbind(TCGA_names_df_split,df_clinical)
#Load DNAm data (variable name dm.age.subset)
load('../data/LUSC-1.Rda')
split_names_DNAm <- data.frame(do.call(rbind,strsplit(names(dm.age.subset), ".", fixed=TRUE))[,3:4])
colnames(split_names_DNAm) <- c("Participant","Sample")
levels(split_names_DNAm$Sample) <- c("tumor", "tumor","healthy", "healthy")
DNAm_age <- data.frame(Participant = split_names_DNAm$Participant, Sample = split_names_DNAm$Sample, DNAmAge = dm.age.subset)
DNAm_age$DNAmAgeHealthy <- NA
DNAm_age$DNAmAgeHealthy[DNAm_age$Sample == "healthy"] <- DNAm_age$DNAmAge[DNAm_age$Sample == "healthy"]
Age <- merge(df_clinical, DNAm_age, by = "Participant",all=F)
linearMod <- lm(DNAmAgeHealthy ~ ChronologicalAge, data=Age)
Age$DNAmAcc <- Age$DNAmAge - predict(linearMod, Age)
Age_tumor <- Age[Age$Sample == "tumor",]
Age_healthy <- Age[Age$Sample == "healthy",]
Age_tumor <- within(Age_tumor, rm(Sample, DNAmAgeHealthy))
#Load rnaseq data
df_rnaseq <- read.table(file = '../data/rnaseq_unnormalised/illuminahiseq_rnaseqv2_RSEM_genes.txt', sep = '\t', header = TRUE,row.names=1)
df_rnaseq <- df_rnaseq[,df_rnaseq[1,] == "raw_count"]
df_rnaseq <- df_rnaseq[-1,]
rnames<- do.call(rbind,strsplit(rownames(df_rnaseq), "|", fixed=TRUE))[,2]
df_rnaseq <- data.frame(sapply( df_rnaseq, function(x) as.numeric(as.character(x))))
rownames(df_rnaseq)<-rnames
split_names_rnaseq <- data.frame(do.call(rbind,strsplit(colnames(df_rnaseq), ".", fixed=TRUE))[,3:4])
colnames(split_names_rnaseq) <- c("Participant","Sample")
levels(split_names_rnaseq$Sample) <- c("tumor", "tumor","healthy")
df_rnaseq_tumor <- df_rnaseq[,split_names_rnaseq$Sample == "tumor"]
df_rnaseq_healthy <- df_rnaseq[,split_names_rnaseq$Sample == "healthy"]
colnames(df_rnaseq_tumor) <- split_names_rnaseq$Participant[split_names_rnaseq$Sample == "tumor"]
colnames(df_rnaseq_healthy) <- split_names_rnaseq$Participant[split_names_rnaseq$Sample == "healthy"]
participants_rnaseq_data_tumor <- data.frame(Participant = colnames(df_rnaseq_tumor))
participants_rnaseq_data_healthy <- data.frame(Participant = colnames(df_rnaseq_healthy))
#remove particpants where no rnaseq data for their tumnors is given
Age_tumor = merge(Age_tumor, participants_rnaseq_data_tumor, by = "Participant")
Age_healthy = merge(Age_healthy, participants_rnaseq_data_healthy, by = "Participant")
Age_tumor$Participant = as.character(Age_tumor$Participant)
Age_healthy$Participant = as.character(Age_healthy$Participant)
df_rnaseq_tumor <- df_rnaseq_tumor[Age_tumor$Participant]
df_rnaseq_healthy <- df_rnaseq_healthy[Age_healthy$Participant]
design <- model.matrix(~DNAmAcc+ChronologicalAge, data=Age_tumor)
#design_simple <- model.matrix(~DNAmAcc, data=Age_tumor)
design_healthy <- model.matrix(~DNAmAcc+ChronologicalAge, data=Age_healthy)
#design_simple_healthy <- model.matrix(~DNAmAcc, data=Age_healthy)
#filter lowly epxressed genes
keep.exprs <- filterByExpr(df_rnaseq_tumor, design = design)
df_rnaseq_tumor <- df_rnaseq_tumor[keep.exprs,]
keep.exprs_healthy <- filterByExpr(df_rnaseq_healthy, design = design_healthy)
df_rnaseq_healthy <- df_rnaseq_healthy[keep.exprs_healthy,]
#generate DGE object
DGE = DGEList(counts = df_rnaseq_tumor)
DGE<-calcNormFactors(DGE,method =c("TMM"))
DGE_healthy = DGEList(counts = df_rnaseq_healthy)
#DGE_healthy<-calcNormFactors(DGE_healthy,method =c("TMM"))
#generate design matrix and apply voom transformation to data
v <- voom(DGE, design=design, plot=TRUE)
v_healthy <- voom(DGE_healthy, design=design_healthy, plot=TRUE)
#v_healthy_simple <- voom(DGE_healthy, design=design_simple_healthy, plot=TRUE)
#Load C2:CP dataset
C2_CP = msigdbr(species = "Homo sapiens", category = "C2", subcategory = "CP")
C2_CP_formated<-tapply(C2_CP$entrez_gene, C2_CP$gs_name,as.character,simplify = FALSE)
idx <- ids2indices(C2_CP_formated,id=rownames(v))
idx_healthy <- ids2indices(C2_CP_formated,id=rownames(v_healthy))
#Use camera function
cam <- camera(v,idx,design, contrast = "DNAmAcc")
cam_healthy <- camera(v_healthy,idx_healthy,design_healthy, contrast = "DNAmAcc")
#cam_healthy_simple <- camera(v_healthy_simple,idx_healthy,design_simple_healthy, contrast = "DNAmAcc")
#Find top uprgulated genes tumor
fit <- lmFit(v, design)
tmp <- contrasts.fit(fit, coef = 2) # test DNAm acc
tmp <- eBayes(tmp)
volcanoplot(tmp, highlight = 4,names = rownames(df_rnaseq_tumor) )
top.table_acc <- topTable(tmp, sort.by = "P", n = Inf)
head(top.table_acc, 20)
summary(decideTests(tmp))
#Find top uprgulated genes tumor
fit_healthy <- lmFit(v_healthy, design_healthy)
tmp_healthy <- contrasts.fit(fit_healthy, coef = 2) # test DNAm acc
tmp_healthy <- eBayes(tmp_healthy)
volcanoplot(tmp_healthy, highlight = 4,names = rownames(df_rnaseq_healthy) )
top.table_healthy <- topTable(tmp_healthy, sort.by = "P", n = Inf)
head(top.table_healthy, 20)
summary(decideTests(tmp_healthy))
# Somatic mutations analysis
path_mutations = "../data/somatic_mutations/"
maffiles <- list.files(path = path_mutations, pattern="*.maf.txt")
maffiles <- apply(as.data.frame(maffiles), 1,function(x) paste(path_mutations,x, sep = ""))
maffilesContent <- lapply(maffiles, read.delim, header=T)
df_mutations = data.frame(Participant = do.call(rbind,strsplit(maffiles, "-", fixed=TRUE))[,3],
NumberSomaticMutations = numeric(length(maffiles)))
for (i in 1:length(maffiles)){
df_mutations$NumberSomaticMutations[i] <- dim(maffilesContent[[i]])[1]
}
df_mutations <- merge(df_mutations, Age_tumor, by = "Participant",all=F)
df_mutations_healthy <- merge(df_mutations, Age_tumor, by = "Participant",all=F)
df_mutations_healthy
path_mutations = "../data/somatic_mutations/"
maffiles <- list.files(path = path_mutations, pattern="*.maf.txt")
maffiles <- apply(as.data.frame(maffiles), 1,function(x) paste(path_mutations,x, sep = ""))
maffilesContent <- lapply(maffiles, read.delim, header=T)
df_mutations = data.frame(Participant = do.call(rbind,strsplit(maffiles, "-", fixed=TRUE))[,3],
NumberSomaticMutations = numeric(length(maffiles)))
for (i in 1:length(maffiles)){
df_mutations$NumberSomaticMutations[i] <- dim(maffilesContent[[i]])[1]
}
df_mutations_healthy <- merge(df_mutations, Age_healthy, by = "Participant",all=F)
Age_tumor <- Age[Age$Sample == "tumor",]
Age_healthy <- Age[Age$Sample == "healthy",]
df_mutations_tumor <- merge(df_mutations, Age_tumor, by = "Participant",all=F)
df_mutations_healthy <- merge(df_mutations, Age_healthy, by = "Participant",all=F)
plot(df_mutations_tumor$NumberSomaticMutations, df_mutations_tumor$DNAmAcc,xlim=c(0,1500))
cor.test(x=df_mutations_tumor$NumberSomaticMutations, y= df_mutations_tumor$DNAmAcc, method = 'spearman')
plot(df_mutations_healthy$NumberSomaticMutations, df_mutations_healthy$DNAmAcc,xlim=c(0,1500))
cor.test(x=df_mutations_healthy$NumberSomaticMutations, y= df_mutations_healthy$DNAmAcc, method = 'spearman')
# Figure 7
png(file="../report/img/fig7.png",
units="in",
width=10,
height=5,
res=300)
plot(df_mutations_tumor$NumberSomaticMutations,
df_mutations_tumor$DNAmAcc,
log="xy",
xlab = "Number of somatic mutations",
ylab= "DNAm acceleration"
)
grid()
title(main="DNAm acceleration vs Number of somatic mutations in tumour cells")
dev.off()
df_mutations_tumor$NumberSomaticMutations
df_mutations_tumor$DNAmAcc
# Figure 7
png(file="../report/img/fig7.png",
units="in",
width=10,
height=5,
res=300)
plot(df_mutations_tumor$NumberSomaticMutations,
df_mutations_tumor$DNAmAcc,
log="y",
xlab = "Number of somatic mutations",
ylab= "DNAm acceleration"
)
grid()
title(main="DNAm acceleration vs Number of somatic mutations in tumour cells")
dev.off()
# Figure 7
png(file="../report/img/fig7.png",
units="in",
width=10,
height=5,
res=300)
plot(df_mutations_tumor$NumberSomaticMutations,
df_mutations_tumor$DNAmAcc,
log="x",
xlab = "Number of somatic mutations",
ylab= "DNAm acceleration"
)
grid()
title(main="DNAm acceleration vs Number of somatic mutations in tumour cells")
dev.off()
# Figure 7
png(file="../report/img/fig7.png",
units="in",
width=10,
height=5,
res=300)
plot(df_mutations_tumor$NumberSomaticMutations,
df_mutations_tumor$DNAmAcc,
#log="x",
xlab = "Number of somatic mutations",
ylab= "DNAm acceleration"
)
grid()
title(main="DNAm acceleration vs Number of somatic mutations in tumour cells")
dev.off()
# Figure 7
png(file="../report/img/fig7.png",
units="in",
width=10,
height=5,
res=300)
plot(df_mutations_tumor$NumberSomaticMutations,
df_mutations_tumor$DNAmAcc,
log="x",
xlab = "Number of somatic mutations",
ylab= "DNAm acceleration"
)
grid()
title(main="DNAm acceleration vs Number of somatic mutations in tumour cells")
dev.off()
#CNV analysis
cnv <- read.delim("../data/cnv/cnv.seg.txt")
cnv$Sample <- as.character(cnv$Sample)
cnv$Participant <- do.call(rbind,strsplit(cnv$Sample, "-", fixed=TRUE))[,3]
cnv$SampleType <- as.factor(do.call(rbind,strsplit(cnv$Sample, "-", fixed=TRUE))[,4])
levels(cnv$SampleType) <-c("tumor", "tumor", "healthy blood", "healthy blood", "healthy", "healthy")
cnv <- cnv[cnv$SampleType == "tumor",]
cnv$Chromosome <- as.character(cnv$Chromosome)
cnv$Chromosome[cnv$Chromosome == "23"] <- "X"
threshold_seg_mean <- 0.2
cnv_metric = data.frame(Participant = unique(cnv$Participant), genes_up = 0, genes_down = 0)
for (Participant in cnv_metric$Participant) {
more_copies <- cnv[(cnv$Participant == Participant) & (cnv$Segment_Mean > threshold_seg_mean),]
fewer_copies <- cnv[(cnv$Participant == Participant) & (cnv$Segment_Mean < -threshold_seg_mean),]
temp_more_copies <- data.frame(chr = paste("chr", more_copies$Chromosome,sep=""),
start = as.numeric(more_copies$Start),
end = as.numeric(more_copies$End))
temp_fewer_copies <- data.frame(chr = paste("chr", as.character(fewer_copies$Chromosome),sep=""),
start = as.numeric(fewer_copies$Start),
end = as.numeric(fewer_copies$End))
GRange_up <- makeGRangesFromDataFrame(temp_more_copies)
GRange_down <- makeGRangesFromDataFrame(temp_fewer_copies)
GRange_up_map <- subsetByOverlaps(genes(TxDb.Hsapiens.UCSC.hg19.knownGene), GRange_up)
GRange_down_map <- subsetByOverlaps(genes(TxDb.Hsapiens.UCSC.hg19.knownGene), GRange_down)
cnv_metric$genes_up[cnv_metric$Participant == Participant] <- length(GRange_up_map)
cnv_metric$genes_down[cnv_metric$Participant == Participant] <- length(GRange_down_map)
break
}
View(GRange_up_map)
GRange_up_map
rownames(GRange_up_map)
names(GRange_up_map)
t<-unique(names(GRange_up_map))
length(t)
cnv <- read.delim("../data/cnv/cnv.seg.txt")
cnv$Sample <- as.character(cnv$Sample)
cnv$Participant <- do.call(rbind,strsplit(cnv$Sample, "-", fixed=TRUE))[,3]
cnv$SampleType <- as.factor(do.call(rbind,strsplit(cnv$Sample, "-", fixed=TRUE))[,4])
levels(cnv$SampleType) <-c("tumor", "tumor", "healthy blood", "healthy blood", "healthy", "healthy")
cnv <- cnv[cnv$SampleType == "tumor",]
cnv$Chromosome <- as.character(cnv$Chromosome)
cnv$Chromosome[cnv$Chromosome == "23"] <- "X"
threshold_seg_mean <- 0.2
cnv_metric = data.frame(Participant = unique(cnv$Participant), genes_up = 0, genes_down = 0)
for (Participant in cnv_metric$Participant) {
more_copies <- cnv[(cnv$Participant == Participant) & (cnv$Segment_Mean > threshold_seg_mean),]
fewer_copies <- cnv[(cnv$Participant == Participant) & (cnv$Segment_Mean < -threshold_seg_mean),]
temp_more_copies <- data.frame(chr = paste("chr", more_copies$Chromosome,sep=""),
start = as.numeric(more_copies$Start),
end = as.numeric(more_copies$End))
temp_fewer_copies <- data.frame(chr = paste("chr", as.character(fewer_copies$Chromosome),sep=""),
start = as.numeric(fewer_copies$Start),
end = as.numeric(fewer_copies$End))
GRange_up <- makeGRangesFromDataFrame(temp_more_copies)
GRange_down <- makeGRangesFromDataFrame(temp_fewer_copies)
GRange_up_map <- subsetByOverlaps(genes(TxDb.Hsapiens.UCSC.hg19.knownGene), GRange_up)
GRange_down_map <- subsetByOverlaps(genes(TxDb.Hsapiens.UCSC.hg19.knownGene), GRange_down)
cnv_metric$genes_up[cnv_metric$Participant == Participant] <- length(unique(names(GRange_up_map)))
cnv_metric$genes_down[cnv_metric$Participant == Participant] <- length(unique(names(GRange_down_map)))
}
save(cnv_metric,file="cnv_metric_unique.Rda")
cor.test(x=cnv_metric$genes_up, y= cnv_metric$DNAmAcc, method = 'spearman')
cnv_metric <- merge(cnv_metric, Age_tumor, by = "Participant",all=F)
cor.test(x=cnv_metric$genes_up, y= cnv_metric$DNAmAcc, method = 'spearman')
cor.test(x=cnv_metric$genes_down, y= cnv_metric$DNAmAcc, method = 'spearman')
cor.test(x=cnv_metric$genes_down+cnv_metric$genes_up, y= cnv_metric$DNAmAcc, method = 'spearman')
# Figure 8
png(file="../report/img/fig8.png",
units="in",
width=10,
height=5,
res=300)
plot(cnv_metric$genes_up,
cnv_metric$DNAmAcc,
log="x",
xlab = "Number of genes with abnormally high copy numbers",
ylab= "DNAm acceleration"
)
grid()
title(main="DNAm acceleration vs number of genes with abnormally high copy number in tumour cells")
dev.off()
# Figure 9
png(file="../report/img/fig9.png",
units="in",
width=10,
height=5,
res=300)
plot(cnv_metric$genes_down,
cnv_metric$DNAmAcc,
log="x",
xlab = "Number of genes with abnormally low copy numbers",
ylab= "DNAm acceleration"
)
grid()
title(main="DNAm acceleration vs number of genes with abnormally low copy number in tumour cells")
dev.off()
# Figure 8
png(file="../report/img/fig8.png",
units="in",
width=10,
height=5,
res=300)
plot(cnv_metric$genes_up,
cnv_metric$DNAmAcc,
xlab = "Number of genes with abnormally high copy numbers",
ylab= "DNAm acceleration"
)
grid()
title(main="DNAm acceleration vs number of genes with abnormally high copy number in tumour cells")
dev.off()
# Figure 9
png(file="../report/img/fig9.png",
units="in",
width=10,
height=5,
res=300)
plot(cnv_metric$genes_down,
cnv_metric$DNAmAcc,
xlab = "Number of genes with abnormally low copy numbers",
ylab= "DNAm acceleration"
)
grid()
title(main="DNAm acceleration vs number of genes with abnormally low copy number in tumour cells")
dev.off()
